---
- hosts: all:!bastion:!ceph
  tasks:
  - include: tasks/common.yml
  - name: Install midokura repo
    copy: src=templates/repo/midokura.repo dest=/etc/yum.repos.d/midokura.repo
    register: repo_added
  - name: Copy hosts file
    copy: src=templates/hosts_file dest=/etc/hosts owner=root group=root mode=0644
  - name: Set hostname
    hostname: name={{ inventory_hostname }}
  - name: Networking - Copy ifcfg-eth0
    copy: src=templates/network-scripts/ifcfg-eth0 dest=/etc/sysconfig/network-scripts
  - name: Networking - ifcfg-eth0 set IPADDR
    lineinfile: dest=/etc/sysconfig/network-scripts/ifcfg-eth0 regexp=^IPADDR line="IPADDR={{ ansible_host }}"
  - block:
    - name: Networking - External - load modules
      modprobe: name=bonding
    - name: Networking - External - Create iptables firewall rules
      copy: src=templates/iptables_ext dest=/etc/sysconfig/iptables
    - name: Networking - External - Copy sysconfig ifcfg files
      copy: src=templates/network-scripts/{{ item }} dest=/etc/sysconfig/network-scripts
      with_items:
        - ifcfg-eth1
        - ifcfg-eth3
        - ifcfg-bond0
    - name: Networking - External - Modify IPADDR
      lineinfile: dest=/etc/sysconfig/network-scripts/ifcfg-bond0 regexp=^IPADDR line=IPADDR={{ ext }}
    - name: Networking - External - Set gateway - bond0
      lineinfile: dest=/etc/sysconfig/network-scripts/ifcfg-bond0 regexp=^GATEWAY line="GATEWAY=169.45.156.193"
    - name: Networking - External - Remove gateway - eth0
      lineinfile: dest=/etc/sysconfig/network-scripts/ifcfg-eth0 regexp=^GATEWAY line=""
    when: ext is defined
  - name: Networking - Find ifcfg files
    find: paths="/etc/sysconfig/network-scripts" patterns="ifcfg-*"
    register: result
  - name: Networking - Disable NetworkManager on all interfaces
    lineinfile: dest={{ item.path }} regexp=^NM_CONTROLLED line="NM_CONTROLLED=no"
    with_items: "{{ result.files }}"
  - name: Networking - Internal - Create internal iptables firewall rules
    copy: src=templates/iptables_int dest=/etc/sysconfig/iptables
    when: ext is not defined
  - name: Reload firewall rules from file
    shell: iptables-restore < /etc/sysconfig/iptables
  - name: Restart iptables
    service: name=iptables state=restarted enabled=yes
  - name: Restart networking
    service: name=network state=restarted enabled=yes
  - name: Update packages
    yum: name=* state=latest
    when: repo_added|changed


- hosts: clc:ufs
  vars:
    cloud_opts: "--bind-addr={{ ansible_host }} -Xmx32G -Xms32G -XX:ReservedCodeCacheSize=512M -XX:+MaxFDLimit -XX:+UseThreadPriorities -XX:+UseCompressedOops -XX:+UseStringCache -XX:+AggressiveOpts"
    sysctl_set:
      net.ipv4.neigh.default.gc_interval: 3600
      net.ipv4.neigh.default.gc_stale_time: 3600
      net.ipv4.neigh.default.gc_thresh1: 1024
      net.ipv4.neigh.default.gc_thresh2: 2048
      net.ipv4.neigh.default.gc_thresh3: 4096
      net.ipv4.ip_forward: 1
  tasks:
  - name: Set sysctl settings
    sysctl: name="{{ item }}" value="{{ sysctl_set[item] }}"
    with_items: "{{ sysctl_set.keys() }}"
  - name: Install eucalyptus-cloud
    yum: name=eucalyptus-cloud
  - name: Configure eucalyptus.conf cloud_opts
    lineinfile: dest=/etc/eucalyptus/eucalyptus.conf regexp=^CLOUD_OPTS line=CLOUD_OPTS="{{ cloud_opts }}"


- hosts: clc:cc
  tasks:
  # Zookeeper
  - include: tasks/zookeeper.yml
  # Cassandra
  - include: tasks/cassandra.yml


- hosts: midolman
  tasks:
  # Midolman
  - include: tasks/midolman.yml


- hosts: clc
  vars:
    euctl_set:
      authentication.access_keys_limit: 20
      authentication.signing_certificates_limit: 20
      authentication.credential_download_generate_certificate: Limited
      services.imaging.worker.instance_type: m1.medium
      services.loadbalancing.worker.instance_type: m1.medium
      cloudformation.region: eucalyptus
      objectstorage.providerclient: riakcs
      objectstorage.s3provider.s3endpoint: "{{ ceph_backend_endpoint }}"
      objectstorage.s3provider.s3accesskey: "{{ ceph_backend_accesskey }}"
      objectstorage.s3provider.s3secretkey: "{{ ceph_backend_secretkey }}"
      system.dns.dnsdomain: "{{ dns_domain }}"
      bootstrap.webservices.use_instance_dns: true
      bootstrap.webservices.use_dns_delegation: true
      #cloud.network.network_configuration: '@network.json'
      #AZ-1
      az-1.cluster.networkmode: VPCMIDO
      az-1.storage.blockstoragemanager: ceph-rbd
      az-1.storage.cephvolumepools: "{{ ceph_backend_volumepools }}"
      az-1.storage.cephsnapshotpools: "{{ ceph_backend_snapshotpools }}"
      #AZ-2
      az-2.cluster.networkmode: VPCMIDO
      az-2.storage.blockstoragemanager: ceph-rbd
      az-2.storage.cephvolumepools: "{{ ceph_backend_volumepools }}"
      az-2.storage.cephsnapshotpools: "{{ ceph_backend_snapshotpools }}"
      storage.global_total_snapshot_size_limit_gb: 200
  tasks:
  - yum: name={{ item }}
    with_items:
    - unzip
  - stat: path=/var/lib/eucalyptus/db/data/PG_VERSION
    register: result
  - service: name=eucalyptus-cloud state=stopped
    when: not result.stat.exists
  - shell: clcadmin-initialize-cloud
    when: not result.stat.exists
  - service: name=eucalyptus-cloud state=restarted enabled=yes
  - wait_for: port=8443
  - wait_for: port=8773
  - synchronize: mode=pull src=/var/lib/eucalyptus/keys/* dest=templates/keys/ checksum=yes recursive=yes
  - action: shell clcadmin-assume-system-credentials > /root/sysrc && echo "export AWS_DEFAULT_REGION=localhost" >> /root/sysrc
    register: result
    until: result.rc == 0
    retries: 10
    delay: 10
  - action: shell source /root/sysrc && euserv-describe-services "{{ ansible_host }}" | grep bootstrap.*enabled
    register: result
    until: result.rc == 0
    retries: 10
    delay: 10
  - name: Set euctl properties
    shell: source /root/sysrc; euctl "{{ item }}={{ euctl_set[item] }}"
    with_items: "{{ euctl_set.keys() }}"
  # MidoAPI
  - include: tasks/midoapi.yml
  # Post-installation
  - include: tasks/awscli.yml
  - include: tasks/eucacli.yml
  # Networking config
  - copy: src=templates/mido/network.json dest=~/network.json
  - shell: source ~/.bash_profile && euctl cloud.network.network_configuration=@network.json
  - service: name=eucanetd state=stopped enabled=yes
  - shell: eucanetd -f || true
  - shell: eucanetd -F || true
  - service: name=eucanetd state=restarted enabled=yes


- hosts: ufs
  tasks:
  - yum: name={{ item }}
    with_items:
    - eucaconsole
    - nginx
  - copy: src=templates/keys/{{ item }} dest=/var/lib/eucalyptus/keys/
    with_items:
    - cloud-cert.pem
    - cloud-pk.pem
    - euca.p12
  - name: Start services
    service: name={{ item }} state=restarted enabled=yes
    with_items:
    - eucalyptus-cloud
    - eucaconsole
  - wait_for: port=8888
  - wait_for: port=80
  - wait_for: port=443


- hosts: cc:sc
  vars:
    sysctl_set:
      net.ipv4.ip_forward: 1
      net.bridge.bridge-nf-call-iptables: 1
  tasks:
  - sysctl: name="{{ item }}" value="{{ sysctl_set[item] }}"
    with_items: "{{ sysctl_set.keys() }}"
  - name: Install cc/sc
    yum: name={{ item }}
    with_items:
    - eucalyptus-sc
    - eucalyptus-cc
  - name: Convert azone to host list
    set_fact: result="[]"
  - set_fact: result="{{ result }} + {{ groups[item] }}"
    with_items: "{{ azone.split(',') }}"
  - name: Convert host list to IP list
    set_fact: cc_nodes="[]"
  - set_fact: cc_nodes="{{ cc_nodes }} + [ '{{ hostvars[item]['ansible_host'] }}' ]"
    with_items: "{{ result }}"
  - set_fact: cc_nodes="{{ cc_nodes | join(' ') }}"
  - name: Configure eucalyptus.conf nodes
    lineinfile: dest=/etc/eucalyptus/eucalyptus.conf regexp=^NODES line=NODES="{{ cc_nodes }}"
    when: cc_nodes is defined
  - copy: src=templates/keys/{{ item }} dest=/var/lib/eucalyptus/keys/
    with_items:
    - cloud-cert.pem
    - cloud-pk.pem
    - euca.p12
  - copy: src=templates/keys/{{ item }} dest=/var/lib/eucalyptus/keys/
    with_items:
    - "{{ azone }}/cluster-cert.pem"
    - "{{ azone }}/cluster-pk.pem"
    - "{{ azone }}/node-cert.pem"
    - "{{ azone }}/node-pk.pem"
    ignore_errors: yes
    when: azone is defined
  - service: name={{ item }} state=restarted enabled=yes
    with_items:
    - eucalyptus-cloud
    - eucalyptus-cc
  - shell: clusteradmin-register-nodes {{ cc_nodes }}
  - wait_for: port=8773 # sc
  - wait_for: port=8774 # cc
  # Ceph Client
  - include: tasks/cephclient.yml
  - shell: ip link add gw-host type veth peer name gw-mido
    ignore_errors: yes

- hosts: nc
  vars:
    sysctl_set:
      net.ipv4.ip_forward: 1
      net.bridge.bridge-nf-call-iptables: 1
  tasks:
  - sysctl: name="{{ item }}" value="{{ sysctl_set[item] }}"
    with_items: "{{ sysctl_set.keys() }}"
  - name: Install eucalyptus-nc
    yum: name=eucalyptus-nc
  - name: Delete virtual network interface
    shell: virsh net-destroy default; virsh net-autostart default --disable
  - name: Load bridge module
    modprobe: name=bridge
  - shell: tuned-adm profile virtual-host
  - copy: src=templates/keys/{{ item }} dest=/var/lib/eucalyptus/keys/
    with_items:
    - cloud-cert.pem
    - "{{ azone }}/cluster-cert.pem"
    - "{{ azone }}/cluster-pk.pem"
    - "{{ azone }}/node-cert.pem"
    - "{{ azone }}/node-pk.pem"
    when: azone is defined
  - service: name={{ item }} state=restarted enabled=yes
    with_items:
    - messagebus
    - eucalyptus-nc
  - wait_for: port=8775
  # Ceph Client
  - include: tasks/cephclient.yml


#subscription-manager register --force --auto-attach --username=robin@connectedworldservices.com --password=4437rvXC698%GFb
# midonet-cli -A --midonet-url=http://127.0.0.1:8080/midonet-api -e list tunnel-zone | grep 'name.mido-tz ' || \
# midonet-cli -A --midonet-url=http://127.0.0.1:8080/midonet-api -e add tunnel-zone name mido-tz type gre
# Get TZ - midonet-cli -A --midonet-url=http://127.0.0.1:8080/midonet-api -e list tunnel-zone name mido-tz
# Get TZ member - midonet-cli -A --midonet-url=http://127.0.0.1:8080/midonet-api -e list tunnel-zone name mido-tz member
# Get Hosts - midonet-cli -A --midonet-url=http://127.0.0.1:8080/midonet-api -e host list
# Add host to TZ -midonet-cli -A --midonet-url=http://127.0.0.1:8080/midonet-api -e tunnel-zone 4d1fd56a-ddd9-4adc-8c7b-b1317bf38340 add member host 76555c97-3094-4381-964e-b25ba0ebb83a address 10.143.58.145
# euca-create-vpc 192.168.0.0/16 --tenancy default
# esi-manage-stack -a create imaging
